# KL algorithm
# KL algorithm for weighted, 2n node graph
# 07/01/2020
# Junkyu Kwon
# email: junkyuk1@umbc.edu


# Find an element from graph(dictionary)
def findElement(n, graph):
    x = 0;
    for i in graph:
        if n in graph[i]:
            x+=1
    return x

# Find a Weight between two nodes
def getWeight(node1, node2, edges):
    weight = 0;
    for i in range(0,int(len(edges))):
        if node1 == edges[i][0]:
            if node2 == edges[i][1]:
                weight = edges[i][2]
        if node2 == edges[i][0]:
            if node1 == edges[i][1]:
                weight = edges[i][2]

    
    return weight        

# Find D values
def Dvalues(v1, v2, graph):
    D = {};

    E = {};
    I = {};
    
    #find External
    for i in v1:
        E[i] = findElement(i,v2);
    for i in v2:
        E[i] = findElement(i,v1);
    #find Internal
    for i in v1:
        I[i] = findElement(i,v1);
    for i in v2:
        I[i] = findElement(i,v2);

    #D values
    for i in v1:
        D[i] = E.get(i)-I.get(i);
    for i in v2:
        D[i] = E.get(i)-I.get(i);

    return D

#Slice graph(dictionary) into pieces 
def devideGraph(n, graph):
  
    v1 = dict(list(graph.items())[len(graph)//n:]) 
    v2 = dict(list(graph.items())[:len(graph)//n:]) 
    print ("\nInitial Partition v1: ")
    print(v1)
    print ("\nInitial Partition v2: ")
    print(v2)
    
    return v1, v2

#Main function
def KL_alg(graph, edges):

    #initial partition
    #only for a graph with 2n nodes
    sizev = len(graph);
    
    g_max = 1;

    v1, v2 = devideGraph(2, graph)
    g_max, weight, v1, v2 = algorithm(g_max, v1, v2, graph, edges, sizev)
    
    #Final output
    #print ("\nFinal total weight: ")
    #print(weight)
    #print ("\nFinal Partition v1: ")
    #print(v1)
    #print ("\nFinal Partition v2: ")
    #print(v2)

def getGain(v1,v2, graph, edges):
    D = Dvalues(v1,v2, graph);
    cost = 0;
    gain = {};
    sizev = len(graph);
    # gain = Da-Db-2*cost
    for i in v1:
        for j in v2:
            if j in v1.get(i):
                cost = getWeight(i,j, edges);
            else:
                cost = 0;
            gain.update({i*sizev+j:D[i]+D[j]-2*cost});
    return gain

#Main algorithm working
def algorithm(v1, v2, graph, edges, sizev):
    #The main algorithm
    #TotalWeightInit = 0
    counter = 0;
    gain = {}
    #for i in v1:
    #        for j in v2:
    #            TotalWeightInit += getWeight(i,j, edges)
    #print("Initial Total Weight is: ")
    #print(TotalWeightInit)
    g_max = 100
    
    while g_max > 0:
        gain = getGain(v1,v2,graph,edges)
                
        #find g_max
        g_max = max(gain.values())
        
        #print("g_max is: ")
        #print(g_max)
        #get Total weight between v1 and v2
        TotalWeight = 0
        
        k1 = 0;
        k2 = 0;
        
        for i in v1:
            for j in v2:
                #swap v1[k1] and v2[k2]
                if i*sizev+j in gain:
                    if g_max == gain[i*sizev+j] and g_max>0:
                        k1 = i;
                        k2 = j;
                        tempv1 = v1.pop(k1)
                        tempv2 = v2.pop(k2)
                        v1.update({k2:tempv2})
                        v2.update({k1:tempv1})
                        break
        #for i in v1:
        #    for j in v2:
        #        TotalWeight += getWeight(i,j, edges)
        
    #main algorithm ends here. This repeats until g_max<=0
    return v1, v2


## Algorithm for solving problems with multiple cells
import numpy as np

#Gets total weight between two partitions
def totalweight(v1,v2, edges):
    totweight = 0;
    
    for i in v1:
        for j in v2:
            totweight += getWeight(i,j, edges);
    return totweight
    
    
#Cuts the dictionary into pieces
def cutPart(graph, NumPart):
    partition = [0]*NumPart
    NumEach = int(len(graph)/NumPart)
    
    for i in range(0, NumPart):
        partition[i] = dict(list(graph.items())[:NumEach])
        for j in range(NumEach*i+1, NumEach*(i+1)+1):
            graph.pop(j)
            
    return partition

#multiple partitions
def MulKL(n, graph, edges): #n = how many elements per partitions?, graph, edges
    num_parts = int(len(graph)/n)
    weight = 0;
    
    partition = cutPart(graph, num_parts)
    
    #get initial total weight
    for i in range(0,num_parts):
        for j in range(0,num_parts):
            weight += totalweight(partition[i],partition[j],edges)
    print("Initial partition: ")
    print(partition)
    print("Initial total weight: ")
    print(weight/2)
    
    #algorithm starts
    #g_max = 100000;
    
    for a in range(0,10):
        #gain = {};
        for i in range(0,num_parts):
            for j in range(0,num_parts):
                partition[i], partition[j] = algorithm(partition[i], partition[j], graph, edges, len(graph))
                #print(gain)
                #g_max = max(list(gain.values()))
                    
    print("Final partition")
    print(partition)
    
    print("Final weight between partitions: ")
    for i in range(0, num_parts):
        weight-=inweight(partition[i],edges)
    print(weight)
    
    #return set of partitions
    return partition


#Sample graphs with 15 nodes
graph15 = {
          1: [2,12,13],
          2: [1,3,14],
          3: [2,4],
          4: [3,5,14],
          5: [4,6,14],
          6: [5,14],
          7: [14],
          8: [9],
          9: [8,10],
          10: [9,15],
          11: [12,13,15],
          12: [1,11],
          13: [1,11,15],
          14: [2,4,5,6,7,15],
          15: [10,11,13,14]
          }

g15ed = [
        [1,2,1],
        [1,12,7],
        [1,13,6],
        [2,3,5],
        [2,14,7],
        [3,4,7],
        [4,5,7],
        [4,14,8],
        [5,6,10],
        [5,14,5],
        [6,14,5],
        [7,14,4],
        [8,9,2],
        [9,10,2],
        [10,15,10],
        [11,12,8],
        [11,13,11],
        [11,15,5],
        [13,15,5],
        [14,15,3]
        ]

MulKL(5,graph15, g15ed)
